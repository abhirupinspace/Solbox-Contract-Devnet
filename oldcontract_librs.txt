#![allow(unexpected_cfgs)]

use anchor_lang::prelude::*;
use anchor_lang::solana_program::system_instruction;
use anchor_lang::solana_program::program::invoke;

declare_id!("D7hxGNmozyBY4T5G2YttUh8ZbErGKXZzGd5z4749on5S");

#[program]
pub mod solbox_contract_devnet {
    use super::*;

    // Initializes the SolBox contract with the provided configuration
    // This is called once when deploying the contract
    // 
    // # Arguments
    // * `ctx` - The context of the request, containing account information
    // * `config` - Initial configuration parameters for the contract
    pub fn initialize(
        ctx: Context<Initialize>,
        config: ContractConfig,
    ) -> Result<()> {
        let solbox = &mut ctx.accounts.solbox;
        // Set the contract owner
        solbox.owner = *ctx.accounts.owner.key;
        // Initialize contract state as unpaused
        solbox.paused = false;
        // Initialize sales tracking to zero
        solbox.total_sold = 0;
        solbox.total_commission_distributed = 0;
        
        // Store the provided configuration
        solbox.config = config;
        
        // Initialize referral system counter
        solbox.referral_count = 0;
        
        // Emit initialization event for tracking
        emit!(InitializeEvent {
            owner: *ctx.accounts.owner.key,
            timestamp: Clock::get()?.unix_timestamp,
        });
        
        Ok(())
    }

    /// Updates the contract configuration
    /// Only the contract owner can call this when the contract is not paused
    /// 
    /// # Arguments
    /// * `ctx` - Context containing account information
    /// * `new_config` - New configuration parameters to apply
    pub fn update_config(
        ctx: Context<UpdateConfig>,
        new_config: ContractConfig,
    ) -> Result<()> {
        // Ensure contract is not paused during update
        require!(
            !ctx.accounts.solbox.paused,
            CustomError::ContractPaused
        );
        
        let solbox = &mut ctx.accounts.solbox;
        // Verify caller is the contract owner
        require!(
            ctx.accounts.owner.key() == solbox.owner,
            CustomError::Unauthorized
        );
        
        // Update configuration with new values
        solbox.config = new_config.clone();
        
        // Emit event for configuration change tracking
        emit!(ConfigUpdateEvent {
            owner: *ctx.accounts.owner.key,
            new_config: new_config.clone(),
            timestamp: Clock::get()?.unix_timestamp,
        });
        
        Ok(())
    }

    /// Toggles the pause state of the contract
    /// Only the contract owner can pause/unpause
    /// Used for emergency stops or maintenance
    pub fn toggle_pause(ctx: Context<UpdateConfig>) -> Result<()> {
        let solbox = &mut ctx.accounts.solbox;
        // Verify caller is the contract owner
        require!(
            ctx.accounts.owner.key() == solbox.owner,
            CustomError::Unauthorized
        );
        
        // Toggle the pause state
        solbox.paused = !solbox.paused;
        
        // Emit event for pause state change
        emit!(PauseEvent {
            owner: *ctx.accounts.owner.key,
            paused: solbox.paused,
            timestamp: Clock::get()?.unix_timestamp,
        });
        
        Ok(())
    }

    /// Processes a gift card purchase with referral rewards
    /// Handles commission distribution and referral tracking
    /// 
    /// # Arguments
    /// * `ctx` - Context containing account information
    /// * `amount` - Amount of SOL to purchase gift card for
    pub fn buy_gift_card(
        ctx: Context<BuyGiftCard>,
        amount: u64
    ) -> Result<()> {
        let solbox = &mut ctx.accounts.solbox;
        
        // Safety check: ensure contract is active
        require!(!solbox.paused, CustomError::ContractPaused);
        
        // Validate purchase amount against allowed values
        require!(
            solbox.config.valid_amounts.contains(&amount),
            CustomError::InvalidAmount
        );
        
        let user = &ctx.accounts.user;
        let referrer = &ctx.accounts.referrer;
        
        // Prevent users from referring themselves
        require!(
            user.key() != referrer.key(),
            CustomError::SelfReferralNotAllowed
        );
        
        // Calculate rewards with overflow protection
        // Commission: Percentage of purchase that goes to referrer
        let commission = amount
            .checked_mul(solbox.config.commission_percentage)
            .ok_or(CustomError::ArithmeticError)?
            .checked_div(100)
            .ok_or(CustomError::ArithmeticError)?;
            
        // Bonus: Additional incentive percentage
        let bonus = amount
            .checked_mul(solbox.config.bonus_percentage)
            .ok_or(CustomError::ArithmeticError)?
            .checked_div(100)
            .ok_or(CustomError::ArithmeticError)?;
            
        // Handle referral spillover logic when referrer limit is reached
        let final_referrer = if solbox.referral_count >= solbox.config.referral_limit as u64 {
            // Find alternative referrer using spillover rules
            find_spillover_position(
                &solbox.referral_relationships,
                referrer.key(),
                solbox.config.referral_limit
            ).ok_or(CustomError::NoSpilloverAvailable)?
        } else {
            referrer.key()
        };
        
        // Update contract state (following checks-effects-interactions pattern)
        solbox.total_sold = solbox.total_sold
            .checked_add(amount)
            .ok_or(CustomError::ArithmeticError)?;
            
        solbox.total_commission_distributed = solbox.total_commission_distributed
            .checked_add(commission)
            .ok_or(CustomError::ArithmeticError)?;
            
        solbox.referral_count = solbox.referral_count
            .checked_add(1)
            .ok_or(CustomError::ArithmeticError)?;
            
        // Record the referral relationship
        solbox.referral_relationships.push(ReferralRelationship {
            user: user.key(),
            referrer: final_referrer,
            timestamp: Clock::get()?.unix_timestamp,
        });
        
        // Transfer commission to the referrer
        invoke(
            &system_instruction::transfer(
                user.key,
                &final_referrer,
                commission
            ),
            &[
                user.to_account_info(),
                ctx.accounts.referrer.to_account_info(),
                ctx.accounts.system_program.to_account_info(),
            ],
        )?;
        
        // Calculate and transfer remaining amount to contract
        let remaining_amount = amount
            .checked_sub(commission)
            .ok_or(CustomError::ArithmeticError)?
            .checked_sub(bonus)
            .ok_or(CustomError::ArithmeticError)?;
            
        invoke(
            &system_instruction::transfer(
                user.key,
                solbox.to_account_info().key,
                remaining_amount
            ),
            &[
                user.to_account_info(),
                solbox.to_account_info(),
                ctx.accounts.system_program.to_account_info(),
            ],
        )?;
        
        // Emit purchase event for tracking
        emit!(GiftCardPurchaseEvent {
            user: *user.key,
            referrer: final_referrer,
            amount,
            commission,
            timestamp: Clock::get()?.unix_timestamp,
        });
        
        Ok(())
    }
}

/// Account validation struct for initialization
/// Ensures all required accounts are provided with correct permissions
#[derive(Accounts)]
pub struct Initialize<'info> {
    #[account(
        init,
        payer = owner,
        // Calculate exact space needed for the account
        space = 8 +   // discriminator
                32 +  // owner pubkey
                1 +   // paused bool
                8 +   // total_sold
                8 +   // total_commission_distributed
                8 +   // referral_count
                CONFIG_SPACE + // config
                REFERRAL_RELATIONSHIPS_SPACE // vector of relationships
    )]
    pub solbox: Account<'info, SolBox>,
    #[account(mut)]
    pub owner: Signer<'info>,
    pub system_program: Program<'info, System>,
}

/// Account validation for configuration updates
#[derive(Accounts)]
pub struct UpdateConfig<'info> {
    #[account(mut)]
    pub solbox: Account<'info, SolBox>,
    #[account(mut)]
    pub owner: Signer<'info>,
    pub system_program: Program<'info, System>,
}

/// Account validation for gift card purchases
#[derive(Accounts)]
pub struct BuyGiftCard<'info> {
    #[account(mut)]
    pub solbox: Account<'info, SolBox>,
    #[account(mut)]
    pub user: Signer<'info>,
    #[account(mut)]
    pub referrer: SystemAccount<'info>,
    pub system_program: Program<'info, System>,
}

/// Main contract state account structure
#[account]
pub struct SolBox {
    pub owner: Pubkey,              // Contract owner address
    pub paused: bool,               // Contract pause state
    pub total_sold: u64,            // Total value of gift cards sold
    pub total_commission_distributed: u64,  // Total commissions paid
    pub referral_count: u64,        // Number of referral relationships
    pub config: ContractConfig,     // Contract configuration
    pub referral_relationships: Vec<ReferralRelationship>, // Referral tracking
}

/// Configuration parameters for the contract
#[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
pub struct ContractConfig {
    pub referral_limit: u8,         // Max referrals per address
    pub commission_percentage: u64,  // Commission rate (0-100)
    pub bonus_percentage: u64,      // Bonus rate (0-100)
    pub valid_amounts: Vec<u64>,    // Allowed gift card amounts
}

/// Structure to track referral relationships
#[derive(AnchorSerialize, AnchorDeserialize, Clone, Debug)]
pub struct ReferralRelationship {
    pub user: Pubkey,               // User who made purchase
    pub referrer: Pubkey,           // Referrer who gets commission
    pub timestamp: i64,             // When relationship was created
}

// Space allocation constants for account sizing
pub const CONFIG_SPACE: usize = 1 + // referral_limit (u8)
                               8 + // commission_percentage (u64)
                               8 + // bonus_percentage (u64)
                               32; // valid_amounts vector space

pub const REFERRAL_RELATIONSHIPS_SPACE: usize = 1000; // Space for referral data

/// Event emitted when contract is initialized
#[event]
pub struct InitializeEvent {
    pub owner: Pubkey,
    pub timestamp: i64,
}

/// Event emitted when configuration is updated
#[event]
pub struct ConfigUpdateEvent {
    pub owner: Pubkey,
    pub new_config: ContractConfig,
    pub timestamp: i64,
}

/// Event emitted when pause state changes
#[event]
pub struct PauseEvent {
    pub owner: Pubkey,
    pub paused: bool,
    pub timestamp: i64,
}

/// Event emitted for each gift card purchase
#[event]
pub struct GiftCardPurchaseEvent {
    pub user: Pubkey,
    pub referrer: Pubkey,
    pub amount: u64,
    pub commission: u64,
    pub timestamp: i64,
}

/// Custom error types for better error handling
#[error_code]
pub enum CustomError {
    #[msg("Contract is paused")]
    ContractPaused,
    #[msg("Unauthorized access")]
    Unauthorized,
    #[msg("Invalid gift card amount")]
    InvalidAmount,
    #[msg("Self-referral not allowed")]
    SelfReferralNotAllowed,
    #[msg("Arithmetic error")]
    ArithmeticError,
    #[msg("No spillover position available")]
    NoSpilloverAvailable,
    #[msg("Invalid referrer")]
    InvalidReferrer,
}

/// Finds an available referrer when the current referrer has reached their limit
/// Uses a HashMap to efficiently track referral counts
/// 
/// # Arguments
/// * `relationships` - Vector of existing referral relationships
/// * `_referrer` - Original referrer address (unused in current implementation)
/// * `limit` - M aximum allowed referrals per address
fn find_spillover_position(
    relationships: &Vec<ReferralRelationship>,
    _referrer: Pubkey,
    limit: u8
) -> Option<Pubkey> {
    // Track referral counts per address
    let mut referral_counts: std::collections::HashMap<Pubkey, u8> = std::collections::HashMap::new();
    
    // Count existing referrals
    for relationship in relationships {
        *referral_counts.entry(relationship.referrer).or_insert(0) += 1;
    }
    
    // Find first referrer who hasn't reached limit
    for relationship in relationships {
        let count = referral_counts.get(&relationship.referrer).unwrap_or(&0);
        if *count < limit {
            return Some(relationship.referrer);
        }
    }
    
    None // No available referrer found
}